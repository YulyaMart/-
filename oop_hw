class Student:
    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}

    def rate_lecturer(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and course in lecturer.courses_attached and course in self.courses_in_progress:
            if course in lecturer.grades:
                lecturer.grades[course] += [grade]
            else:
                lecturer.grades[course] = [grade]
        else:
            return 'Ошибка'

    def __average_grade__(self):
        for grades_list in self.grades.values():
            a = sum(grades_list)/len(grades_list)
            return a

    def __lt__(self, other):
        if not isinstance(other, Student):
            print('Нет такого студента')
            return
        return self.__average_grade__() < other.__average_grade__()

    def __str__(self):
        res = f'Имя: {self.name}\nФмилия: {self.surname}\nСредняя оценка за домашние задания: {self.__average_grade__()}\nКурсы в процессе изучения: {",".join(self.courses_in_progress)}\nЗавершенные курсы: {",".join(self.finished_courses)}'
        return res
        
class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []
        
class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}

    def __average_grade_lec__(self):
        for grades_list in self.grades.values():
            a = sum(grades_list)/len(grades_list)
            return a

    def __lt__(self, other):
        if not isinstance(other, Lecturer):
            print('Нет такого лектора')
            return
        return self.__average_grade_lec__() < other.__average_grade_lec__()

    def __str__(self):
        res = f'Имя: {self.name}\nФмилия: {self.surname}\nСредняя оценка за лекции: {self.__average_grade_lec__()}'
        return res

class Reviewer(Mentor):
    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'

    def __str__(self):
        res = f'Имя: {self.name}\nФмилия: {self.surname}'
        return res

# best_student = Student('Ruoy', 'Eman', 'your_gender')
# best_student.courses_in_progress += ['Python']
 
# cool_mentor = Mentor('Some', 'Buddy')
# cool_mentor.courses_attached += ['Python']
 
# cool_mentor.rate_hw(best_student, 'Python', 10)
# cool_mentor.rate_hw(best_student, 'Python', 10)
# cool_mentor.rate_hw(best_student, 'Python', 10)
 
# print(best_student.grades)

student_1 = Student('Ivan','Ivanov','male')
student_1.finished_courses +=['Python','CSS','HTML']
student_1.courses_in_progress += ['Java']

student_2 = Student('Anya','Smirnova','female')
student_2.finished_courses += ['Python', 'Java', 'CSS']
student_2.courses_in_progress += ['HTML']

lecturer_1 = Lecturer('Mikhail','Petrov')
lecturer_1.courses_attached += ['Java', 'Python']

lecturer_2 = Lecturer('Maria','Zubkova')
lecturer_2.courses_attached += ['HTML', 'CSS']

reviewer_1 = Reviewer('Lev','Orlov')
reviewer_1.courses_attached += ['Java', 'Python']

reviewer_2 = Reviewer('Olga','Frolova')
reviewer_2.courses_attached += ['HTML', 'CSS']

reviewer_1.rate_hw(student_1, 'Java', 3)
reviewer_1.rate_hw(student_1, 'Java', 10)
reviewer_2.rate_hw(student_2, 'HTML', 5)
reviewer_2.rate_hw(student_2, 'HTML', 10)

student_1.rate_lecturer(lecturer_1, 'Java', 6)
student_1.rate_lecturer(lecturer_1, 'Java', 8)
student_2.rate_lecturer(lecturer_2, 'HTML', 10)
student_2.rate_lecturer(lecturer_2, 'HTML', 3)

print(student_1.__average_grade__())
print(student_2.__average_grade__())
print(lecturer_1.__average_grade_lec__())
print(lecturer_2.__average_grade_lec__())
print(student_1 > student_2)
print(student_1 < student_2)
print(lecturer_1 > lecturer_2)
print(lecturer_1 < lecturer_2)
print(student_1)
print(student_2)
print(lecturer_1)
print(lecturer_2)
print(reviewer_1)
print(reviewer_2)

students_list = [student_1, student_2]
lecturers_list = [lecturer_1, lecturer_2]

def students_performance(students_list, course_name):
    marks_total = 0
    grade_total = 0
    for stud in students_list:
        for course, grade in stud.grades.items():
            if course is course_name:
                marks_total += len(grade)
                grade_total += sum(grade)
    if marks_total > 0:            
        return grade_total / marks_total
    else:
        return str(f'По курсу {course_name} никто из студентов еще не получал оценки за домашнее задание')

print(students_performance(students_list, 'Java'))

def lecturers_perfomance(lecturers_list, course_name):
    marks_total = 0
    grade_total = 0
    for lect in lecturers_list:
        for course, grade in lect.grades.items():
            if course is course_name:
                marks_total += len(grade)
                grade_total += sum(grade)
    if marks_total > 0:            
        return grade_total / marks_total
    else:
        return str(f'По курсу {course_name} никто из лекторов еще не получал оценки за лекции')

print(lecturers_perfomance(lecturers_list, 'CSS'))